https://www.codingninjas.com/studio/problems/add-two-numbers_1170520?utm_source=youtube&utm_medium=affiliate&utm_campaign=Codestudio_Linkedlistseries&leftPanelTabValue=SUBMISSION

    int sum=0;
    int leftover=0;
    sum=num1->data+num2->data;
    if(num1->next==NULL && num2->next==NULL){
        sum=num1->data+num2->data;
        if(sum>=10){
            leftover=sum-10;
            Node*temp_index_1=new Node(leftover);
            Node*temp_index_2=new Node(1);
            temp_index_1->next=temp_index_2;
            return temp_index_1;
        }
        Node*temp_index_1=new Node(sum);
        return temp_index_1;
    }
    int carry_over=0;
    Node*head_sum=new Node();
    if(sum>=10){
        leftover=sum-10;
        head_sum->data=leftover;
        carry_over=1;
    }
    else if(sum<10){
        head_sum->data=sum;
    }
    Node*temp_num_1=num1->next;
    Node*temp_num_2=num2->next;
    Node*temp_sum_index=head_sum;
    Node*temp_sum_index_2=new Node();
    while(temp_num_1!=NULL && temp_num_2!=NULL){
        temp_sum_index_2=new Node();
        sum=temp_num_1->data+temp_num_2->data;
        sum+=carry_over;
        if(sum>=10){
            leftover=sum-10;
            temp_sum_index_2->data=leftover;
            carry_over=1;
        } 
        else {
            temp_sum_index_2->data = sum;
            carry_over = 0;
        }
        temp_sum_index->next = temp_sum_index_2;
        temp_num_1 = temp_num_1->next;
        temp_num_2 = temp_num_2->next;
        temp_sum_index = temp_sum_index->next;
    }
    if(temp_num_1==NULL && temp_num_2==NULL){
        if(carry_over==1){
            temp_sum_index_2=new Node();
            temp_sum_index_2->data=1;
            temp_sum_index->next = temp_sum_index_2;
            temp_sum_index=temp_sum_index->next;
        }
        return head_sum;
    }
    else if(temp_num_2==NULL){
        while(temp_num_1!=NULL){
            temp_sum_index_2=new Node();
            sum=carry_over+temp_num_1->data;
            if(sum>=10){
                leftover=sum-10;
                temp_sum_index_2->data=leftover;
                carry_over=1;
            }
             else {
                temp_sum_index_2->data = sum;
                carry_over = 0;
            }
            temp_sum_index->next = temp_sum_index_2;
            temp_num_1 = temp_num_1->next;
            temp_sum_index = temp_sum_index->next;
        }
    } 
    else if(temp_num_1==NULL){
        while(temp_num_2!=NULL){
            temp_sum_index_2=new Node();
            sum=carry_over+temp_num_2->data;
            if(sum>=10){
                leftover=sum-10;
                temp_sum_index_2->data=leftover;
                carry_over=1;
            }
             else {
                temp_sum_index_2->data = sum;
                carry_over = 0;
            }
            temp_sum_index->next = temp_sum_index_2;
            temp_num_2 = temp_num_2->next;
            temp_sum_index = temp_sum_index->next;
        }
    } 
    return head_sum;



CODE WITH LESS LINES AND BETTER RUN TIME

void if_one_LL_is_complete(Node* temp_num_2,Node* temp_num_1,Node* temp_sum_index_2,Node*temp_sum_index,int sum,int carry_over){
    int leftover=0;
        while(temp_num_1!=NULL){
            temp_sum_index_2=new Node();
            sum=carry_over+temp_num_1->data;
            if(sum>=10){
                leftover=sum-10;
                temp_sum_index_2->data=leftover;
                carry_over=1;
            }
             else {
                temp_sum_index_2->data = sum;
                carry_over = 0;
            }
            temp_sum_index->next = temp_sum_index_2;
            temp_num_1 = temp_num_1->next;
            temp_sum_index = temp_sum_index->next;
        }
    return; 
}

Node *addTwoNumbers(Node *num1, Node *num2)
{
    int sum=0;
    int leftover=0;
    sum=num1->data+num2->data;
    int carry_over=0;
    Node*head_sum=new Node();
    if(sum>=10){
        leftover=sum-10;
        head_sum->data=leftover;
        carry_over=1;
    }
    else{
        head_sum->data=sum;
    }
    Node*temp_num_1=num1->next;
    Node*temp_num_2=num2->next;
    Node*temp_sum_index=head_sum;
    Node*temp_sum_index_2=new Node();
    while(temp_num_1!=NULL && temp_num_2!=NULL){
        temp_sum_index_2=new Node();
        sum=temp_num_1->data+temp_num_2->data;
        sum+=carry_over;
        if(sum>=10){
            leftover=sum-10;
            temp_sum_index_2->data=leftover;
            carry_over=1;
        } 
        else {
            temp_sum_index_2->data = sum;
            carry_over = 0;
        }
        temp_sum_index->next = temp_sum_index_2;
        temp_num_1 = temp_num_1->next;
        temp_num_2 = temp_num_2->next;
        temp_sum_index = temp_sum_index->next;
    }
    if(temp_num_1==NULL && temp_num_2==NULL){
        if(carry_over==1){
            temp_sum_index_2=new Node();
            temp_sum_index_2->data=1;
            temp_sum_index->next = temp_sum_index_2;
            temp_sum_index=temp_sum_index->next;
        }
        return head_sum;
    }
    else if(temp_num_2==NULL){
        if_one_LL_is_complete(temp_num_2,temp_num_1,temp_sum_index_2,temp_sum_index,sum,carry_over);
    } 
    else if(temp_num_1==NULL){
        if_one_LL_is_complete(temp_num_1,temp_num_2,temp_sum_index_2,temp_sum_index,sum,carry_over);
    } 
    return head_sum;
}
